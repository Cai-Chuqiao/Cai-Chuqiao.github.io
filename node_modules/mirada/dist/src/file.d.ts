import { ImageData as CVImageData, Mat } from './types/opencv';
import fileType = require('file-type');
/**
 * A thin layer on top of cv.Mat with lots of utilities to load, write, encode, etc.
 */
export declare class File {
    readonly name: string;
    protected _mat: Mat;
    constructor(name: string, _mat: Mat);
    size(): {
        width: number;
        height: number;
    };
    getMimeType(): string | undefined;
    getExtension(): string;
    asMat(): Mat;
    asImageData(): CVImageData;
    asHTMLImageData(): ImageData;
    asDataUrl(): string;
    readonly width: number;
    readonly height: number;
    readonly mat: Mat;
    /**
     * It removes the the file from file system and also delete() this file's Mat
     */
    remove(deleteMat?: boolean): this;
    /**
     * Returns an array buffer containing the image encoded in given format or inferring format from its name.
     */
    asArrayBuffer(format?: string): Promise<ArrayBuffer>;
    /**
     * Writes this image on given file path, encoded in given format (or inferred form current name).
     */
    write(path?: string, format?: string): Promise<this>;
    setMat(mat: Mat): this;
    /**
     * Shows this image in given HTML canvas or image element.
     */
    show(el: HTMLElement): this;
    asBase64(format?: string): Promise<string>;
    delete(): void;
    /**
     * Converts the Mat of this file to RGBA channel type. It will replace the current mat and delete the original.
     */
    toRgba(): this;
    clone(name?: string): File;
    /**
     * Loads file from given base64 string containing an encoded image.
    */
    static fromBase64(base64: string, name?: string): Promise<File>;
    /**
     * Loads file from given array buffer containing an encoded image.
     */
    static fromArrayBuffer(buffer: ArrayBuffer, name?: string): Promise<File>;
    /**
     * Loads file from given array buffer view containing an encoded image.
     */
    static fromArrayBufferView(a: ArrayBufferView, name?: string): Promise<File>;
    static getBufferFileType(a: ArrayBuffer): fileType.FileTypeResult;
    static fileType(a: ArrayBuffer): fileType.FileTypeResult | undefined;
    static getBufferFileName(a: ArrayBuffer): string;
    /**
     * Loads file from given data url string containing an encoded image.
    */
    static fromDataUrl(dataUrl: string, name?: string): Promise<File>;
    /**
     * Loads files from files in html input element of type "file".
     */
    static fromHtmlFileInputElement(el: HTMLInputElement): Promise<File[]>;
    /**
     * Loads file form existing HTMLElement or HTMLImageElement
     */
    static fromCanvas(el: HTMLElement | string): File;
    /**
     * Shortcut for [resolve] that returns the first result.
     */
    static resolveOne(files: string | File | undefined | (string | File | undefined)[]): Promise<File | undefined>;
    /**
     * Given paths, urls or files it will try to load them all and return a list of File for those succeed.
     */
    static resolve(files: string | File | undefined | (string | File | undefined)[]): Promise<File[]>;
    static isFile(f: any): f is File;
    static asPath(f: string | File): string;
    static fromData(data: CVImageData, name?: string): File;
    private static _buildName;
    static fromMat(mat: Mat, name?: string): File;
    toString(): string;
    static fromUrl(url: string, o?: RequestInit & {
        name?: string;
    }): Promise<File>;
    static fromFile(path: string, name?: string): Promise<File>;
}
