"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @deprecated Obsoleted by VideoRenderer
 */
var CameraHelper = /** @class */ (function () {
    function CameraHelper(videoInput, outputCanvas, callback) {
        this.videoInput = videoInput;
        this.outputCanvas = outputCanvas;
        this.callback = callback;
        this.streaming = false;
        this.onVideoCanPlay = this.onVideoCanPlay.bind(this);
        this.onVideoStarted = this.onVideoStarted.bind(this);
        this.onVideoStopped = this.onVideoStopped.bind(this);
    }
    CameraHelper.prototype.start = function () {
        if (!this.streaming) {
            this.startCamera('qvga', this.onVideoStarted, this.videoInput);
        }
    };
    CameraHelper.prototype.stop = function () {
        if (this.streaming) {
            this.stopCamera();
            this.onVideoStopped();
        }
    };
    CameraHelper.prototype.startCamera = function (resolution, callback, video) {
        var _this = this;
        var constraints = {
            qvga: { width: { exact: 320 }, height: { exact: 240 } },
            vga: { width: { exact: 640 }, height: { exact: 480 } }
        };
        var videoConstraint = constraints[resolution];
        if (!videoConstraint) {
            videoConstraint = true;
        }
        navigator.mediaDevices
            .getUserMedia({ video: video, audio: false })
            .then(function (s) {
            video.srcObject = s;
            video.play();
            _this.videoInput = video;
            _this.stream = s;
            _this.onCameraStartedCallback = callback;
            video.addEventListener('canplay', _this.onVideoCanPlay, false);
        })
            .catch(function (err) {
            console.error(err);
        });
    };
    CameraHelper.prototype.stopCamera = function () {
        if (this.videoInput) {
            this.videoInput.pause();
            this.videoInput.srcObject = null;
            this.videoInput.removeEventListener('canplay', this.onVideoCanPlay);
        }
        if (this.stream) {
            this.stream.getVideoTracks().forEach(function (t) { return t.stop(); });
        }
    };
    CameraHelper.prototype.onVideoStarted = function () {
        this.streaming = true;
        this.outputCanvas.width = this.videoInput.videoWidth;
        this.outputCanvas.height = this.videoInput.videoHeight;
        this.callback();
    };
    CameraHelper.prototype.onVideoStopped = function () {
        this.streaming = false;
        this.outputCanvas.getContext('2d').clearRect(0, 0, this.outputCanvas.width, this.outputCanvas.height);
        this.stopCamera();
    };
    CameraHelper.prototype.onVideoCanPlay = function () {
        if (this.onCameraStartedCallback) {
            this.onCameraStartedCallback(this.stream, this.videoInput);
        }
    };
    return CameraHelper;
}());
exports.CameraHelper = CameraHelper;
//# sourceMappingURL=cameraHelper.js.map