"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs_1 = require("fs");
var misc_utils_of_mine_generic_1 = require("misc-utils-of-mine-generic");
var format_1 = require("./format");
var misc_1 = require("./util/misc");
exports.FS_ROOT = '/work';
var FS_;
/**
 * gets the emscripten FS API
 */
function getFS() {
    return FS_;
}
exports.getFS = getFS;
var opencvLoaded = false;
/**
 * Loads opencv.js file. It will do it only once no matter if called multiple times.
 * In the browser a new script element is created to load the file while in Node.js
 * the file is loaded using a require() call.
 *
 * Returns a promise resolved when the library is ready or rejected if there's a problem.
 *
 * Notice that among the options users can define the location of opencv.js file, which
 * in the case of the browser it could be in an external server.
 */
function loadOpencv(options) {
    if (options === void 0) { options = {}; }
    return __awaiter(this, void 0, void 0, function () {
        var formatProxies;
        var _this = this;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (options.force) {
                        opencvLoaded = false;
                        misc_utils_of_mine_generic_1.getGlobal().Module = undefined;
                        FS_ = undefined;
                    }
                    if (opencvLoaded) {
                        options.onloadCallback && options.onloadCallback();
                        return [2 /*return*/];
                    }
                    formatProxies = options.formatProxies || __spreadArrays(misc_utils_of_mine_generic_1.isNode() ? [] : [function () { return new format_1.CanvasCodec(); }]);
                    return [4 /*yield*/, misc_utils_of_mine_generic_1.serial(formatProxies.map(function (p) { return function () { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, format_1.installFormatProxy(p)];
                                    case 1:
                                        _a.sent();
                                        return [2 /*return*/];
                                }
                            });
                        }); }; }))];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, format_1.loadFormatProxies()];
                case 2:
                    _a.sent();
                    if (!misc_utils_of_mine_generic_1.isNode()) return [3 /*break*/, 4];
                    return [4 /*yield*/, loadOpencvNode(options)];
                case 3:
                    _a.sent();
                    return [3 /*break*/, 6];
                case 4: return [4 /*yield*/, loadOpencvBrowser(options)];
                case 5:
                    _a.sent();
                    _a.label = 6;
                case 6: return [2 /*return*/];
            }
        });
    });
}
exports.loadOpencv = loadOpencv;
function loadFormatCodecs(o) {
    return __awaiter(this, void 0, void 0, function () {
        var _this = this;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, misc_utils_of_mine_generic_1.serial((o.formatProxies || []).map(function (p) { return function () { return __awaiter(_this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, format_1.installFormatProxy(p)];
                                case 1:
                                    _a.sent();
                                    return [2 /*return*/];
                            }
                        });
                    }); }; }))];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, format_1.loadFormatProxies()];
                case 2:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
function loadOpencvNode(o) {
    var _this = this;
    return new Promise(function (resolve) {
        var fileName = o.opencvJsExceptions ? 'opencv_exception.js' : 'opencv.js';
        var paths = [o.opencvJsLocation, "./node_modules/mirada/dist/src/" + fileName, "./dist/src/" + fileName].filter(misc_utils_of_mine_generic_1.notFalsy);
        var g = misc_utils_of_mine_generic_1.getGlobal();
        var path = paths.find(fs_1.existsSync);
        var resolved = path && misc_1.resolveNodeModule(path);
        if (!resolved) {
            throw misc_1.buildError(fileName + " not found. in any of these: " + paths.join(', '));
        }
        g.Module = {
            preRun: function () {
                if (typeof window !== 'object' && !g.Module.FS.analyzePath(exports.FS_ROOT).exists) {
                    g.Module.FS.mkdir(exports.FS_ROOT);
                    g.Module.FS.mount(g.Module.FS.filesystems.NODEFS, { root: o.cwd || process.cwd() || '.' }, exports.FS_ROOT);
                }
            },
            onRuntimeInitialized: function () { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    opencvLoaded = true;
                    FS_ = misc_utils_of_mine_generic_1.getGlobal().Module.FS;
                    o.onloadCallback && o.onloadCallback();
                    resolve();
                    return [2 /*return*/];
                });
            }); },
            onAbort: function (e) {
                console.error('Error has occurred in WebAssembly Module', e, e.stack);
                console.trace();
            }
        };
        try {
            g.cv = require(resolved);
        }
        catch (error) {
            console.error("An error occurred when trying to load " + fileName + " form " + resolved, error, error.stack);
            throw error;
        }
    });
}
function loadOpencvBrowser(o) {
    var _this = this;
    return new Promise(function (resolve, reject) {
        var script = document.createElement('script');
        script.setAttribute('async', '');
        script.setAttribute('type', 'text/javascript');
        script.addEventListener('load', function () { return __awaiter(_this, void 0, void 0, function () {
            var g;
            var _this = this;
            return __generator(this, function (_a) {
                g = misc_utils_of_mine_generic_1.getGlobal();
                if (typeof g.cv !== 'undefined' && typeof g.cv.getBuildInformation !== 'undefined') {
                    opencvLoaded = true;
                    FS_ = misc_utils_of_mine_generic_1.getGlobal().Module.FS;
                    o.onloadCallback && o.onloadCallback();
                    resolve();
                }
                else {
                    g.cv = typeof g.cv === 'undefined' ? {} : g.cv;
                    g.cv.onRuntimeInitialized = function () { return __awaiter(_this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            opencvLoaded = true;
                            FS_ = misc_utils_of_mine_generic_1.getGlobal().Module.FS;
                            o.onloadCallback && o.onloadCallback();
                            resolve();
                            return [2 /*return*/];
                        });
                    }); };
                }
                return [2 /*return*/];
            });
        }); });
        var src = o.opencvJsLocation || (o.opencvJsExceptions ? 'opencv_exception.js' : 'opencv.js');
        script.addEventListener('error', function () {
            reject('Failed to load ' + src);
        });
        script.src = src;
        var node = document.getElementsByTagName('script')[0];
        node.parentNode.insertBefore(script, node);
    });
}
//# sourceMappingURL=opencvReady.js.map