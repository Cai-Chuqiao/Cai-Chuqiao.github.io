"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var __1 = require("..");
var imageUtil_1 = require("./imageUtil");
/**
 * @deprecated
 * Will be removed
 */
function grabCut_obsolete(o) {
    return __awaiter(this, void 0, void 0, function () {
        var src, mask, bgdModel, fgdModel, rect, i, j, point1, point2, rgbaImg, image;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, __1.loadOpencv()];
                case 1:
                    _a.sent();
                    src = o.image.asMat();
                    cv.cvtColor(src, src, cv.COLOR_RGBA2RGB, 0);
                    mask = new cv.Mat();
                    bgdModel = new cv.Mat();
                    fgdModel = new cv.Mat();
                    rect = new cv.Rect(o.x, o.y, o.width, o.height);
                    cv.grabCut(src, mask, rect, bgdModel, fgdModel, 1, cv.GC_INIT_WITH_RECT);
                    for (i = 0; i < src.rows; i++) {
                        for (j = 0; j < src.cols; j++) {
                            if (mask.ucharPtr(i, j)[0] == 0 || mask.ucharPtr(i, j)[0] == 2) {
                                src.ucharPtr(i, j)[0] = 0;
                                src.ucharPtr(i, j)[1] = 0;
                                src.ucharPtr(i, j)[2] = 0;
                            }
                        }
                    }
                    if (o.frameColor) {
                        point1 = new cv.Point(rect.x, rect.y);
                        point2 = new cv.Point(rect.x + rect.width, rect.y + rect.height);
                        cv.rectangle(src, point1, point2, o.frameColor);
                    }
                    rgbaImg = imageUtil_1.toRgba(src);
                    image = __1.toImageData(rgbaImg);
                    mask.delete();
                    rgbaImg.delete();
                    bgdModel.delete();
                    fgdModel.delete();
                    return [2 /*return*/, {
                            image: image
                        }];
            }
        });
    });
}
exports.grabCut_obsolete = grabCut_obsolete;
//# sourceMappingURL=grabCut.js.map