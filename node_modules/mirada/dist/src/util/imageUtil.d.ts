import { File } from '../file';
import { EmscriptenEmbindInstance, Mat, Point, Scalar, Size } from '../types/opencv';
/**
 * Creates an CV ImageData object from given image.
 */
export declare function toImageData(img: Mat): {
    data: Uint8ClampedArray;
    width: number;
    height: number;
};
export declare const asImageData: typeof toImageData;
export declare function isMat(m: any): m is Mat;
/**
 * Returns a new image that is identical to given (1, 3 or 4 channels) but has 4 RGBA channels.
 */
export declare function toRgba(mat: Mat, dst?: Mat): Mat;
export declare function fromFile(f: string): Promise<Mat>;
export declare function fromArrayBuffer(a: ArrayBuffer): Promise<Mat>;
export declare function fromUrl(f: string): Promise<Mat>;
/**
 * Compare two images by getting the L2 error (square-root of sum of squared error). The lower the result the more similar are the images.
 */
export declare function compareL2(f1: Mat | File, f2: Mat | File, destroyBoth?: boolean): number;
export declare function asMat(f: File | Mat): Mat;
export declare function del(...m: (EmscriptenEmbindInstance)[]): void;
/**
 * sets the color of pixel at coords (x,y)
 */
export declare function set(m: Mat, x: number, y: number, val: Scalar): void;
/**
 * gets the color of pixel at coords (x,y)
 */
export declare function get(m: Mat, x: number, y: number): any[];
export declare function map(mat: Mat, dst: Mat, fn: (p: Scalar, x: number, y: number) => Scalar): void;
/**
 * for overload methods that won't accept undefined as argument, like 'mask' cv.add()
 */
export declare function noArray(): Mat;
export declare function pointToSize(p: Point): Size;
export declare function sizeToPoint(s: Size): Point;
export declare function isSize(size: any): size is Size;
/**
 * a serializable (as in JSON.stringify) representation of Mat instances
 */
export interface MatData {
    cols: number;
    rows: number;
    data: string;
    type: any;
}
export declare function mat2data(m: Mat): MatData;
export declare function data2mat(d: MatData): Mat;
export declare function isMatData(d: any): d is MatData;
/**
 * Executes JSON.stringify on JSON containing Mat instances.
 */
export declare function jsonStringifyWithMat(s: any): string;
/**
 * Executes JSON.parse on JSON containing Mat instances.
 */
export declare function jsonParseWithMat(d: string): any;
