"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var cross_fetch_1 = __importDefault(require("cross-fetch"));
var opencvReady_1 = require("../opencvReady");
/**
 * if given a file it ignores its contents and alwasys read again from FS
 */
function readFile(f, FS) {
    if (FS === void 0) { FS = cv.FS; }
    return FS.readFile(getFilePath(f));
}
exports.readFile = readFile;
/**
 * Returns file name / path of given file relative to emscripten FS root  (in the context of emscripten FS)
 */
function getFileName(path) {
    return path.startsWith(opencvReady_1.FS_ROOT + "/") ? path.substring((opencvReady_1.FS_ROOT + "/").length, path.length) : "" + path;
}
exports.getFileName = getFileName;
/**
 * Returns absolute path of given file (in the context of emscripten FS)
 */
function getFilePath(path) {
    return path.startsWith(opencvReady_1.FS_ROOT + "/") ? path : opencvReady_1.FS_ROOT + "/" + path;
}
exports.getFilePath = getFilePath;
function writeFile(name, f, FS) {
    if (FS === void 0) { FS = cv.FS; }
    FS.writeFile(getFilePath(name), f);
}
exports.writeFile = writeFile;
function removeFile(f, FS) {
    if (FS === void 0) { FS = cv.FS; }
    FS.unlink(getFilePath(getFilePath(f)));
}
exports.removeFile = removeFile;
function isDir(f, FS) {
    if (FS === void 0) { FS = cv.FS; }
    try {
        return FS.isDir(FS.stat(getFilePath(f)).mode);
    }
    catch (error) {
        return false;
    }
}
exports.isDir = isDir;
function isFile(f, FS) {
    if (FS === void 0) { FS = cv.FS; }
    try {
        return FS.isFile(FS.stat(getFilePath(f)).mode);
    }
    catch (error) {
        return false;
    }
}
exports.isFile = isFile;
exports.fileUtil = {
    isDir: isDir, isFile: isFile, removeFile: removeFile, writeFile: writeFile, getFilePath: getFilePath, readFile: readFile, getFileName: getFileName
};
function loadDataFile(url, name) {
    return __awaiter(this, void 0, void 0, function () {
        var r, _a, _b, _c, _d;
        return __generator(this, function (_e) {
            switch (_e.label) {
                case 0:
                    name = name || url.substring(url.lastIndexOf('/') + 1, url.length);
                    if (!!cv.FS.readdir('/').includes(name)) return [3 /*break*/, 4];
                    return [4 /*yield*/, cross_fetch_1.default(url)];
                case 1:
                    r = _e.sent();
                    _b = (_a = cv.FS).createDataFile;
                    _c = ['/', name];
                    _d = Uint8ClampedArray.bind;
                    return [4 /*yield*/, r.arrayBuffer()];
                case 2: return [4 /*yield*/, _b.apply(_a, _c.concat([new (_d.apply(Uint8ClampedArray, [void 0, _e.sent()]))(), true, false, false]))];
                case 3:
                    _e.sent();
                    _e.label = 4;
                case 4: return [2 /*return*/, name];
            }
        });
    });
}
exports.loadDataFile = loadDataFile;
//# sourceMappingURL=fileUtil.js.map