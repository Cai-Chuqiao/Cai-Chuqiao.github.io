"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var buffer_1 = require("buffer/");
function dataToUrl(data, mimeType, fileName) {
    return base64ToUrl(dataToBase64(data), mimeType, fileName);
}
exports.dataToUrl = dataToUrl;
function dataToBase64(data) {
    return buffer_1.Buffer.from(data).toString('base64');
}
exports.dataToBase64 = dataToBase64;
/**
 * Creates a DataUrl like `data:image/jpeg;name=hindenburg.jpg;base64,` using given base64 content, mimeType and fileName.
 */
function base64ToUrl(base64, mimeType, fileName) {
    return "data:" + mimeType + (fileName ? ";name=" + fileName : '') + ";base64," + base64;
}
exports.base64ToUrl = base64ToUrl;
function urlToBase64(s) {
    return s.substring(s.indexOf(';base64,') + ';base64,'.length);
}
exports.urlToBase64 = urlToBase64;
/**
 * Extracts the name of a data url like `data:image/jpeg;name=hindenburg.jpg;base64,`..., if any.
 */
function getDataUrlFileName(url) {
    var p = url && url.split(';base64,');
    var q = p.length ? p[0].split(';').find(function (s) { return s.includes('name='); }) : '';
    p = q ? q.split('=') : [];
    return p[p.length - 1];
}
exports.getDataUrlFileName = getDataUrlFileName;
function arrayBufferToBase64(buffer) {
    return buffer_1.Buffer.from(buffer).toString('base64');
}
exports.arrayBufferToBase64 = arrayBufferToBase64;
function arrayBufferToUrl(buffer, mime, name) {
    var b64 = arrayBufferToBase64(buffer);
    return base64ToUrl(b64, mime, name);
}
exports.arrayBufferToUrl = arrayBufferToUrl;
function arrayBufferToString(buffer) {
    return buffer_1.Buffer.from(buffer).toString();
}
exports.arrayBufferToString = arrayBufferToString;
//# sourceMappingURL=base64.js.map