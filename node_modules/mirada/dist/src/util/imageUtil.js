"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var misc_utils_of_mine_generic_1 = require("misc-utils-of-mine-generic");
var file_1 = require("../file");
/**
 * Creates an CV ImageData object from given image.
 */
function toImageData(img) {
    return {
        data: new Uint8ClampedArray(img.data),
        width: img.cols,
        height: img.rows
    };
}
exports.toImageData = toImageData;
exports.asImageData = toImageData;
function isMat(m) {
    return m && typeof m.rows === 'number' && typeof m.cols === 'number' && typeof m.data === 'object' && typeof m.copyTo === 'function';
}
exports.isMat = isMat;
/**
 * Returns a new image that is identical to given (1, 3 or 4 channels) but has 4 RGBA channels.
 */
function toRgba(mat, dst) {
    if (dst === void 0) { dst = new cv.Mat(); }
    var depth = mat.type() % 8;
    var scale = depth <= cv.CV_8S ? 1.0 : (depth <= cv.CV_32S ? 1.0 / 256.0 : 255.0);
    var shift = (depth === cv.CV_8S || depth === cv.CV_16S) ? 128.0 : 0.0;
    mat.convertTo(dst, cv.CV_8U, scale, shift);
    switch (dst.type()) {
        case cv.CV_8UC1:
            cv.cvtColor(dst, dst, cv.COLOR_GRAY2RGBA);
            break;
        case cv.CV_8UC3:
            cv.cvtColor(dst, dst, cv.COLOR_RGB2RGBA);
            break;
        case cv.CV_8UC4:
            break;
        default:
            throw new Error('Bad number of channels (Source image must have 1, 3 or 4 channels)');
    }
    return dst;
}
exports.toRgba = toRgba;
function fromFile(f) {
    return __awaiter(this, void 0, void 0, function () {
        var file;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, file_1.File.fromFile(f)];
                case 1:
                    file = _a.sent();
                    return [2 /*return*/, file.asMat()];
            }
        });
    });
}
exports.fromFile = fromFile;
function fromArrayBuffer(a) {
    return __awaiter(this, void 0, void 0, function () {
        var file;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, file_1.File.fromArrayBuffer(a)];
                case 1:
                    file = _a.sent();
                    return [2 /*return*/, file.asMat()];
            }
        });
    });
}
exports.fromArrayBuffer = fromArrayBuffer;
function fromUrl(f) {
    return __awaiter(this, void 0, void 0, function () {
        var file;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, file_1.File.fromUrl(f)];
                case 1:
                    file = _a.sent();
                    return [2 /*return*/, file.asMat()];
            }
        });
    });
}
exports.fromUrl = fromUrl;
/**
 * Compare two images by getting the L2 error (square-root of sum of squared error). The lower the result the more similar are the images.
 */
function compareL2(f1, f2, destroyBoth) {
    if (destroyBoth === void 0) { destroyBoth = false; }
    var a = asMat(f1), b = asMat(f2);
    if (a.rows > 0 && a.rows == b.rows && a.cols > 0 && a.cols == a.cols) {
        // Calculate the L2 relative error between images.
        var errorL2 = cv.norm1(a, b, cv.NORM_L2);
        // Convert to a reasonable scale, since L2 error is summed across all pixels of the image.
        var similarity = errorL2 / (a.rows * a.cols);
        destroyBoth && del(a, b);
        return similarity;
    }
    else {
        //Images have a different size
        return 1.0;
    }
}
exports.compareL2 = compareL2;
function asMat(f) {
    return file_1.File.isFile(f) ? f.asMat() : f;
}
exports.asMat = asMat;
function del() {
    var m = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        m[_i] = arguments[_i];
    }
    m.filter(function (m) { return !m.isDeleted(); }).forEach(function (m) { return m.delete(); });
}
exports.del = del;
/**
 * sets the color of pixel at coords (x,y)
 */
function set(m, x, y, val) {
    var c = m.channels();
    var view = m.data;
    for (var i = 0; i < val.length; i++) {
        view[y * c * m.cols + x * c + i] = val[i];
    }
}
exports.set = set;
/**
 * gets the color of pixel at coords (x,y)
 */
function get(m, x, y) {
    var c = m.channels();
    var view = m.data;
    var v = [];
    for (var i = 0; i < c; i++) {
        v.push(view[y * c * m.cols + x * c + i]);
    }
    return v;
}
exports.get = get;
function map(mat, dst, fn) {
    for (var y = 0; y < mat.rows; y++) {
        for (var x = 0; x < mat.cols; x++) {
            var v = fn(get(mat, x, y), x, y);
            set(dst, x, y, v);
        }
    }
}
exports.map = map;
var _noArray;
/**
 * for overload methods that won't accept undefined as argument, like 'mask' cv.add()
 */
function noArray() {
    if (!_noArray) {
        _noArray = cv.Mat.ones(0, 0, cv.CV_8U);
    }
    return _noArray;
}
exports.noArray = noArray;
function pointToSize(p) {
    return new cv.Size(p.x, p.y);
}
exports.pointToSize = pointToSize;
function sizeToPoint(s) {
    return new cv.Point(s.width, s.height);
}
exports.sizeToPoint = sizeToPoint;
function isSize(size) {
    return typeof size === 'object' && typeof size.width === 'number';
}
exports.isSize = isSize;
function mat2data(m) {
    return {
        rows: m.rows,
        cols: m.cols,
        type: m.type(),
        data: ab2str(m.data)
    };
}
exports.mat2data = mat2data;
function data2mat(d) {
    return cv.matFromArray(d.rows, d.cols, d.type, str2ab(d.data));
}
exports.data2mat = data2mat;
function isMatData(d) {
    return d && typeof d === 'object' && typeof d.rows === 'number' && typeof d.cols === 'number' && typeof d.type !== 'undefined' && Object.keys(d).sort().join(',') === 'cols,data,rows,type';
}
exports.isMatData = isMatData;
var _Buffer = require('buffer/').Buffer;
if (misc_utils_of_mine_generic_1.isNode() && typeof _Buffer !== 'undefined') {
    _Buffer = Buffer;
}
function ab2str(buf) {
    return _Buffer.from(buf).toString('base64');
}
function str2ab(str) {
    return new Uint8Array(_Buffer.from(str, 'base64'));
}
/**
 * Executes JSON.stringify on JSON containing Mat instances.
 */
function jsonStringifyWithMat(s) {
    return JSON.stringify(s, function (key, value) {
        if (isMat(value)) {
            return mat2data(value);
        }
        else {
            return value;
        }
    });
}
exports.jsonStringifyWithMat = jsonStringifyWithMat;
/**
 * Executes JSON.parse on JSON containing Mat instances.
 */
function jsonParseWithMat(d) {
    return JSON.parse(d, function (key, value) {
        if (isMatData(value)) {
            return data2mat(value);
        }
        else {
            return value;
        }
    });
}
exports.jsonParseWithMat = jsonParseWithMat;
//# sourceMappingURL=imageUtil.js.map